;; src/ contains no dune-related files

(data_only_dirs src)

;; Ignore target if it exists locally

(dirs
 :standard
 \
 ../target
 ../_riscv32-gnu-toolchain
 ../_build
 ../_opam
 ../book)

;;
;; Rules to set the optimisation flags for the rust compiler.
;;
;; By default, we compile with optimisations enabled. The instructions that
;; these generate may not be available on all CPU architectures; to build a
;; slower version that does not use these instructions, set the environment
;; variable `RUST_TARGET_FEATURE_OPTIMISATIONS=n`.
;;

(rule
 (enabled_if
  (<> %{env:RUST_TARGET_FEATURE_OPTIMISATIONS=y} n))
 (targets rustflags.sexp)
 (action
  (with-stdout-to
   rustflags.sexp
   (echo "-C target-feature=+bmi2,+adx"))))

(rule
 (enabled_if
  (= %{env:RUST_TARGET_FEATURE_OPTIMISATIONS=y} n))
 (targets rustflags.sexp)
 (action
  (with-stdout-to
   rustflags.sexp
   (echo "-C target-feature=-bmi2,-adx"))))

;;
;; rules to build the static library for kimchi
;;

;; note: to build Mina, nix will set `KIMCHI_STUBS` and ignore this rule

(rule
 (enabled_if
  (= %{env:KIMCHI_STUBS=n} n))
 (targets libkimchi_stubs.a)
 (deps
  Cargo.toml
  (source_tree src)
  (source_tree ../)
  (env_var KIMCHI_STUBS))
 (locks /cargo-lock) ;; lock for rustup
 (action
  (progn
   (setenv
    RUSTFLAGS
    %{read:rustflags.sexp}
    (run
     cargo
     build
     -p
     kimchi-stubs
     --release
     --target-dir
     %{read:../dune-build-root}/cargo_kimchi_stubs))
   (run cp %{read:../dune-build-root}/cargo_kimchi_stubs/release/libkimchi_stubs.a .))))

;;
;; declare the libraries we're going to generate to match the bindings
;;

(library
 (public_name kimchi_types)
 (name kimchi_types)
 (modules kimchi_types)
 (instrumentation
  (backend bisect_ppx)))

(library
 (public_name pasta_bindings)
 (name pasta_bindings)
 (modules pasta_bindings)
 (libraries kimchi_types)
 (instrumentation
  (backend bisect_ppx)))

(library
 (public_name kimchi_bindings)
 (name kimchi_bindings)
 (modules kimchi_bindings)
 (libraries pasta_bindings kimchi_types)
 (instrumentation
  (backend bisect_ppx)))

;;
;; generate the OCaml bindings
;;

;; note: to build Mina, nix will set `KIMCHI_STUBS` and ignore this rule

(rule
 (targets kimchi_types.ml pasta_bindings.ml kimchi_bindings.ml)
 (enabled_if
  (= %{env:KIMCHI_STUBS=n} n))
 (mode promote)
 (deps
  .ocamlformat
  Cargo.toml
  (source_tree src)
  (source_tree ../)
  (env_var KIMCHI_STUBS))
 (locks /cargo-lock) ;; lock for rustup
 (action
  (progn
   (setenv
    CARGO_TARGET_DIR
    "%{read:../dune-build-root}/cargo_kimchi_bindgen"
    (run cargo run %{targets}))
   (run ocamlformat -i %{targets}))))
