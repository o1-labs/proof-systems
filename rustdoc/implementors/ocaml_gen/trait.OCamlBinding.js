(function() {var implementors = {
"kimchi":[["impl&lt;Var, Field&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.BasicInput.html\" title=\"struct kimchi::snarky::constraint_system::BasicInput\">BasicInput</a>&lt;Var, Field&gt;<span class=\"where fmt-newline\">where\n    Var: OCamlDesc,\n    Field: OCamlDesc,</span>"],["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/lookup/runtime_tables/caml/struct.CamlRuntimeTableCfg.html\" title=\"struct kimchi::circuits::lookup::runtime_tables::caml::CamlRuntimeTableCfg\">CamlRuntimeTableCfg</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"],["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/scalars/caml/struct.CamlRandomOracles.html\" title=\"struct kimchi::circuits::scalars::caml::CamlRandomOracles\">CamlRandomOracles</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/lookup/runtime_tables/caml/struct.CamlRuntimeTableSpec.html\" title=\"struct kimchi::circuits::lookup::runtime_tables::caml::CamlRuntimeTableSpec\">CamlRuntimeTableSpec</a>"],["impl&lt;A&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.EndoscaleScalarRound.html\" title=\"struct kimchi::snarky::constraint_system::EndoscaleScalarRound\">EndoscaleScalarRound</a>&lt;A&gt;<span class=\"where fmt-newline\">where\n    A: OCamlDesc,</span>"],["impl&lt;Var&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.EcAddCompleteInput.html\" title=\"struct kimchi::snarky::constraint_system::EcAddCompleteInput\">EcAddCompleteInput</a>&lt;Var&gt;<span class=\"where fmt-newline\">where\n    Var: OCamlDesc,</span>"],["impl&lt;CamlG, CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/prover/caml/struct.CamlProverProof.html\" title=\"struct kimchi::prover::caml::CamlProverProof\">CamlProverProof</a>&lt;CamlG, CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlG: OCamlDesc,\n    CamlF: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/wires/caml/struct.CamlWire.html\" title=\"struct kimchi::circuits::wires::caml::CamlWire\">CamlWire</a>"],["impl OCamlBinding for <a class=\"enum\" href=\"kimchi/circuits/gate/enum.GateType.html\" title=\"enum kimchi::circuits::gate::GateType\">GateType</a>"],["impl&lt;F&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/gate/caml/struct.CamlCircuitGate.html\" title=\"struct kimchi::circuits::gate::caml::CamlCircuitGate\">CamlCircuitGate</a>&lt;F&gt;<span class=\"where fmt-newline\">where\n    F: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi/prover/internal_traces/caml/struct.CamlTraces.html\" title=\"struct kimchi::prover::internal_traces::caml::CamlTraces\">CamlTraces</a>"],["impl&lt;Var&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.PoseidonInput.html\" title=\"struct kimchi::snarky::constraint_system::PoseidonInput\">PoseidonInput</a>&lt;Var&gt;<span class=\"where fmt-newline\">where\n    Var: OCamlDesc,</span>"],["impl&lt;CamlG&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/prover/caml/struct.CamlProverCommitments.html\" title=\"struct kimchi::prover::caml::CamlProverCommitments\">CamlProverCommitments</a>&lt;CamlG&gt;<span class=\"where fmt-newline\">where\n    CamlG: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/lookup/lookups/struct.LookupFeatures.html\" title=\"struct kimchi::circuits::lookup::lookups::LookupFeatures\">LookupFeatures</a>"],["impl&lt;CamlG, CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/prover/caml/struct.CamlProofWithPublic.html\" title=\"struct kimchi::prover::caml::CamlProofWithPublic\">CamlProofWithPublic</a>&lt;CamlG, CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlG: OCamlDesc,\n    CamlF: OCamlDesc,</span>"],["impl&lt;A&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.ScaleRound.html\" title=\"struct kimchi::snarky::constraint_system::ScaleRound\">ScaleRound</a>&lt;A&gt;<span class=\"where fmt-newline\">where\n    A: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"enum\" href=\"kimchi/circuits/gate/enum.CurrOrNext.html\" title=\"enum kimchi::circuits::gate::CurrOrNext\">CurrOrNext</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/constraints/struct.FeatureFlags.html\" title=\"struct kimchi::circuits::constraints::FeatureFlags\">FeatureFlags</a>"],["impl&lt;CamlG&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/prover/caml/struct.CamlLookupCommitments.html\" title=\"struct kimchi::prover::caml::CamlLookupCommitments\">CamlLookupCommitments</a>&lt;CamlG&gt;<span class=\"where fmt-newline\">where\n    CamlG: OCamlDesc,</span>"],["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/oracles/caml/struct.CamlOracles.html\" title=\"struct kimchi::oracles::caml::CamlOracles\">CamlOracles</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"],["impl&lt;A&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.EndoscaleRound.html\" title=\"struct kimchi::snarky::constraint_system::EndoscaleRound\">EndoscaleRound</a>&lt;A&gt;<span class=\"where fmt-newline\">where\n    A: OCamlDesc,</span>"],["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/lookup/tables/caml/struct.CamlLookupTable.html\" title=\"struct kimchi::circuits::lookup::tables::caml::CamlLookupTable\">CamlLookupTable</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"],["impl&lt;CamlG, CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/proof/caml/struct.CamlRecursionChallenge.html\" title=\"struct kimchi::proof::caml::CamlRecursionChallenge\">CamlRecursionChallenge</a>&lt;CamlG, CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlG: OCamlDesc,\n    CamlF: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"enum\" href=\"kimchi/circuits/lookup/lookups/enum.LookupPattern.html\" title=\"enum kimchi::circuits::lookup::lookups::LookupPattern\">LookupPattern</a>"],["impl&lt;Var, Field&gt; OCamlBinding for <a class=\"enum\" href=\"kimchi/snarky/constraint_system/enum.KimchiConstraint.html\" title=\"enum kimchi::snarky::constraint_system::KimchiConstraint\">KimchiConstraint</a>&lt;Var, Field&gt;<span class=\"where fmt-newline\">where\n    Var: OCamlDesc,\n    Field: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.FeatureFlag.html\" title=\"enum kimchi::circuits::expr::FeatureFlag\">FeatureFlag</a>"],["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/lookup/runtime_tables/caml/struct.CamlRuntimeTable.html\" title=\"struct kimchi::circuits::lookup::runtime_tables::caml::CamlRuntimeTable\">CamlRuntimeTable</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"],["impl&lt;Var&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/snarky/constraint_system/struct.EcEndoscaleInput.html\" title=\"struct kimchi::snarky::constraint_system::EcEndoscaleInput\">EcEndoscaleInput</a>&lt;Var&gt;<span class=\"where fmt-newline\">where\n    Var: OCamlDesc,</span>"],["impl&lt;Evals&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/proof/struct.PointEvaluations.html\" title=\"struct kimchi::proof::PointEvaluations\">PointEvaluations</a>&lt;Evals&gt;<span class=\"where fmt-newline\">where\n    Evals: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi/circuits/lookup/lookups/struct.LookupPatterns.html\" title=\"struct kimchi::circuits::lookup::lookups::LookupPatterns\">LookupPatterns</a>"],["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi/proof/caml/struct.CamlProofEvaluations.html\" title=\"struct kimchi::proof::caml::CamlProofEvaluations\">CamlProofEvaluations</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"]],
"kimchi_stubs":[["impl&lt;PolyComm&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/plonk_verifier_index/struct.CamlPlonkVerificationEvals.html\" title=\"struct kimchi_stubs::plonk_verifier_index::CamlPlonkVerificationEvals\">CamlPlonkVerificationEvals</a>&lt;PolyComm&gt;<span class=\"where fmt-newline\">where\n    PolyComm: OCamlDesc,</span>"],["impl&lt;Fr&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/plonk_verifier_index/struct.CamlPlonkDomain.html\" title=\"struct kimchi_stubs::plonk_verifier_index::CamlPlonkDomain\">CamlPlonkDomain</a>&lt;Fr&gt;<span class=\"where fmt-newline\">where\n    Fr: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/field_vector/fp/struct.CamlFpVector.html\" title=\"struct kimchi_stubs::field_vector::fp::CamlFpVector\">CamlFpVector</a>"],["impl&lt;F&gt; OCamlBinding for <a class=\"enum\" href=\"kimchi_stubs/arkworks/group_affine/enum.CamlGroupAffine.html\" title=\"enum kimchi_stubs::arkworks::group_affine::CamlGroupAffine\">CamlGroupAffine</a>&lt;F&gt;<span class=\"where fmt-newline\">where\n    F: OCamlDesc,</span>"],["impl&lt;PolyComm&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/plonk_verifier_index/struct.CamlLookupVerifierIndex.html\" title=\"struct kimchi_stubs::plonk_verifier_index::CamlLookupVerifierIndex\">CamlLookupVerifierIndex</a>&lt;PolyComm&gt;<span class=\"where fmt-newline\">where\n    PolyComm: OCamlDesc,</span>"],["impl&lt;Fr, SRS, PolyComm&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/plonk_verifier_index/struct.CamlPlonkVerifierIndex.html\" title=\"struct kimchi_stubs::plonk_verifier_index::CamlPlonkVerifierIndex\">CamlPlonkVerifierIndex</a>&lt;Fr, SRS, PolyComm&gt;<span class=\"where fmt-newline\">where\n    Fr: OCamlDesc,\n    SRS: OCamlDesc,\n    PolyComm: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/gate_vector/fp/struct.CamlPastaFpPlonkGateVector.html\" title=\"struct kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVector\">CamlPastaFpPlonkGateVector</a>"],["impl&lt;T&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/plonk_verifier_index/struct.CamlLookupSelectors.html\" title=\"struct kimchi_stubs::plonk_verifier_index::CamlLookupSelectors\">CamlLookupSelectors</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/srs/fp/struct.CamlFpSrs.html\" title=\"struct kimchi_stubs::srs::fp::CamlFpSrs\">CamlFpSrs</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/srs/fq/struct.CamlFqSrs.html\" title=\"struct kimchi_stubs::srs::fq::CamlFqSrs\">CamlFqSrs</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/arkworks/group_projective/struct.CamlGroupProjectiveVesta.html\" title=\"struct kimchi_stubs::arkworks::group_projective::CamlGroupProjectiveVesta\">CamlGroupProjectiveVesta</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/arkworks/pasta_fq/struct.CamlFq.html\" title=\"struct kimchi_stubs::arkworks::pasta_fq::CamlFq\">CamlFq</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/pasta_fq_plonk_index/struct.CamlPastaFqPlonkIndex.html\" title=\"struct kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndex\">CamlPastaFqPlonkIndex</a>"],["impl OCamlBinding for <a class=\"enum\" href=\"kimchi_stubs/plonk_verifier_index/enum.CamlLookupsUsed.html\" title=\"enum kimchi_stubs::plonk_verifier_index::CamlLookupsUsed\">CamlLookupsUsed</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/arkworks/pasta_fp/struct.CamlFp.html\" title=\"struct kimchi_stubs::arkworks::pasta_fp::CamlFp\">CamlFp</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/pasta_fp_plonk_index/struct.CamlPastaFpPlonkIndex.html\" title=\"struct kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndex\">CamlPastaFpPlonkIndex</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/arkworks/bigint_256/struct.CamlBigInteger256.html\" title=\"struct kimchi_stubs::arkworks::bigint_256::CamlBigInteger256\">CamlBigInteger256</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/arkworks/group_projective/struct.CamlGroupProjectivePallas.html\" title=\"struct kimchi_stubs::arkworks::group_projective::CamlGroupProjectivePallas\">CamlGroupProjectivePallas</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/field_vector/fq/struct.CamlFqVector.html\" title=\"struct kimchi_stubs::field_vector::fq::CamlFqVector\">CamlFqVector</a>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/plonk_verifier_index/struct.CamlLookupInfo.html\" title=\"struct kimchi_stubs::plonk_verifier_index::CamlLookupInfo\">CamlLookupInfo</a>"],["impl&lt;F&gt; OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/oracles/struct.CamlOracles.html\" title=\"struct kimchi_stubs::oracles::CamlOracles\">CamlOracles</a>&lt;F&gt;<span class=\"where fmt-newline\">where\n    F: OCamlDesc,</span>"],["impl OCamlBinding for <a class=\"struct\" href=\"kimchi_stubs/gate_vector/fq/struct.CamlPastaFqPlonkGateVector.html\" title=\"struct kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVector\">CamlPastaFqPlonkGateVector</a>"]],
"mina_poseidon":[["impl&lt;CamlF&gt; OCamlBinding for <a class=\"struct\" href=\"mina_poseidon/sponge/caml/struct.CamlScalarChallenge.html\" title=\"struct mina_poseidon::sponge::caml::CamlScalarChallenge\">CamlScalarChallenge</a>&lt;CamlF&gt;<span class=\"where fmt-newline\">where\n    CamlF: OCamlDesc,</span>"]],
"poly_commitment":[["impl&lt;CamlG&gt; OCamlBinding for <a class=\"struct\" href=\"poly_commitment/commitment/caml/struct.CamlPolyComm.html\" title=\"struct poly_commitment::commitment::caml::CamlPolyComm\">CamlPolyComm</a>&lt;CamlG&gt;<span class=\"where fmt-newline\">where\n    CamlG: OCamlDesc,</span>"],["impl&lt;G, F&gt; OCamlBinding for <a class=\"struct\" href=\"poly_commitment/ipa/caml/struct.CamlOpeningProof.html\" title=\"struct poly_commitment::ipa::caml::CamlOpeningProof\">CamlOpeningProof</a>&lt;G, F&gt;<span class=\"where fmt-newline\">where\n    G: OCamlDesc,\n    F: OCamlDesc,</span>"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()