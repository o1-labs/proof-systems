searchState.loadedDescShard("folding", 0, "This library implements basic components to fold …\nCombinators that will be used to fold the constraints, …\nThe type of an abstract challenge that can be found in the …\nThe target curve used by the polynomial commitment\nDescribe a folding environment. The type parameters are:\nOutput of the folding prover\nFor Plonk, it will be the commitments to the polynomials …\nThis type refers to the two instances to be folded\nThe SRS used by the polynomial commitment. The SRS is used …\nStructure which could be storing useful information like …\nFor PlonK, it will be the polynomials in evaluation form …\nObtains a given challenge from the expanded instance for …\nDefine the different structures required for the examples …\nReturns the evaluations of a given column witness at omega …\nThis module contains description of the additional columns …\nThis variant of folding is designed to efficiently handle …\nImplement a library to represent expressions/multivariate …\nFold two relaxable instances into a relaxed instance. It …\nThis is the main entry point to fold two instances and …\nThe folded instance, containing, in particular, the result …\nFolded witness, containing, in particular, the result of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the number of additional columns added by …\nThis module defines a list of traits and structures that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new environment storing the structure, instances …\nA library to reduce constraints into degree 2.\nThe left relaxed instance, including the potential …\nThe right relaxed instance, including the potential …\nsimilar to Self::col, but folding may ask for a dynamic …\nThis module offers a standard implementation of …\nThe error terms of degree 1, see the top-level …\nThe error terms of degree 2, see the top-level …\nElements to absorbed in IVC, in the same order as done in …\nVerifier of the folding scheme; returns a new folded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of randomizer to combine expressions\nA challenge used by the PIOP or the folding scheme.\nA constant value in our expression\nThe error term introduced in the “relaxed” instance.\nDescribes the additional columns. It is parametrized by a …\nThe variables of the initial circuit, without …\nA “virtual” selector that can be used to …\nFor the extra columns added by the module <code>quadraticization</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFold two relaxable instances into a relaxed instance. It …\nfolding with a selector will assume that only the selector …\nReturns the argument unchanged.\nReturn the number of additional columns added by …\nCalls <code>U::from(self)</code>.\nCreates a new folding scheme for decomposable circuits. It …\nResult of a folding expression evaluation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe random values <code>α_{i}</code> used to aggregate constraints\nDescribe the degree of a constraint. As described in the …\nThe error term\nExtra expressions that can be created by folding\nAdditional columns created by quadraticization\nextra nodes created by folding, should not be passed to …\nCompatible folding expressions that can be used with …\nComponents to be used to convert multivariate polynomials …\nInternal expression used for folding. A “folding” …\nA value of type IntegratedFoldingExpr is the result of the …\nRepresent a dynamic selector, in the case of using …\nUsed to encode the sign of a term in a polynomial.\nA term of a polynomial For instance, in the polynomial …\nThe variable <code>u</code> used to make the polynomial homogenous\nReturn the degree of the column\nCombines constraints into single expression\nMap all quad columns into regular witness columns.\nConvert a list of folding compatible expression into the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps variable (column index) in expression using the <code>mapper</code>\nAn extended instance is an instance that has been extended …\nThis structure represents a witness extended with extra …\nTrait to make a witness relaxable/homogenizable\nA relaxed instance is an instance that has been relaxed by …\nBlinder used for the commitments to the cross terms\nCombine two objects ‘a’ and ‘b’ into a new object …\nCombine two relaxed instances into a new relaxed instance.\nThe commitment to the error term, introduced when …\nThe error vector, introduced when homogenizing the …\nExtra columns added by quadraticization to lower the …\nCommitments to the extra columns added by quadraticization\nThe original instance, extended with the columns added by …\nThe original witness, extended with the columns added by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the alphas values for the instance\nReturn the blinder that can be used while committing to …\nReturns the blinder value. It is the same as the one of …\nProvides access to the extra columns added by …\nProvides access to commitments to the extra columns added …\nThe original instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the no extra columns are added by …\nThis method takes a witness and a vector of evaluations to …\nThis method takes an Instance and a commitment to zero and …\nThis method returns the scalars and commitments that must …\nReturn the elements to be absorbed by the sponge\nReturns the elements to be absorbed by the sponge\nThe scalar <code>u</code> that is used to homogenize the polynomials\nThis is the original witness, without quadraticization\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the constraints converted into degree 2 or less …\nDefault type for when you don’t need structure\nA generic Index based environment\nA standard folding config that supports: <code>G</code>: any curve <code>Col</code>: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")