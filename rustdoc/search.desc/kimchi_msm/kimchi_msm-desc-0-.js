searchState.loadedDescShard("kimchi_msm", 0, "Domain size for the MSM project, equal to the BN254 SRS …\nThe foreign field we are emulating (one of the two)\nThe native field we are working with.\nBitsize of the foreign field limb representation.\nNumber of limbs representing one foreign field element …\nA blinding factor used to hide the polynomial, if necessary\nImplement a variant of the logarithmic derivative lookups …\nInstantiations of Logups for the MSM project Instantiate …\nClone of kimchi/precomputed_srs.rs but for MSM project …\nEnvironment capability for accessing and reading columns. …\nEnvironment capability similar to <code>ColAccessCap</code> but for …\nA direct field access capability modelling an abstract …\nCapability for computing arithmetic functions and enforcing\nCapability for invoking table lookups.\nCapability for reading and moving forward in a multirow …\nAsserts that the value is zero.\nTurns a constant value into a variable.\nReturns the current row.\nGiven variable <code>x</code> and position <code>ix</code>, it (hybrid) writes <code>x</code> …\nLook up (read) value from a lookup table.\nWrite a value into a runtime table. Panics if called on a …\nProgresses to the next row.\nReads value from a column position.\nWrite an array of values simultaneously.\nRead value from a (row,column) position.\nSets an assert predicate <code>f(X)</code> such that when assert_zero is\nConvert an abstract variable to a field element! Inverse …\nWrite an array of values simultaneously.\nWrite an array of /field/ values simultaneously.\nWrite a field element directly as a constant.\nIdentity <code>MPrism</code> from any type <code>T</code> to itself.\n<code>MPrism</code> allows one to Something like a Prism, but for Maybe …\nThe lens source type, i.e., the object containing the …\nSub environment with a lens that is mapping columns.\nSub environment with a lens that is mapping lookup tables.\nThe lens target type, i.e., the field to be accessed or …\nReturns the current row.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProgresses to the next row.\nRead value from a (row,column) position.\nThe function that maps the argument of <code>assert_zero</code>.\nAn indexed set of constraints.\nReturns the argument unchanged.\nGet all relevant constraints generated by the constraint …\nGet constraints related to the lookup argument.\nGet constraints related to the application logic itself.\nCalls <code>U::from(self)</code>.\nAggregated lookups or “reads”.\nAggregated “write” lookups, for runtime tables.\nWitness builder environment. Operates on multiple rows at …\nFunction used to map assertions.\nCreate a new empty-state witness builder.\nReturns the current row.\nFixed values for selector columns. <code>fixed_selectors[i][j]</code> …\nReturns the argument unchanged.\nGetting multiplicities for range check tables less or equal\nGenerates proof inputs, repacking/collecting internal …\nReturn all runtime tables collected so far, padded to the …\nCalls <code>U::from(self)</code>.\nLookup multiplicities, a vector of values <code>m_i</code> per lookup …\nLookup “read” requests per table. Each element of the …\nProgresses to the next row.\nProgress to the computations on the next row.\nRead value from a (row,column) position.\nValues for runtime tables. Each element (value) in the map …\nSets a fixed selector, the vector of length equal to the …\nSets all fixed selectors directly. Each item in <code>selectors</code> …\nConvert an abstract variable to a field element! Inverse …\nThe witness columns that the environment is working with. …\nThe collection of polynomials (all in evaluation form) and …\nChallenges from the IOP.\nConstant values required\nThe domains used in the PLONK argument.\nFixed selectors. These are “predefined” with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently\nLookup specific polynomials\nThe witness column polynomials. Includes relation columns, …\nDescribe a generic indexed variable X_{i}.\nA datatype expressing a generalized column, but with …\nColumns related to dynamic selectors to indicate gate type\nConstant column that is /always/ fixed for a given circuit.\nThe lookup aggregation, i.e. <code>phi</code>\nThe fixed tables. The parameter is considered to the …\nMultiplicities, indexed. This corresponds to the <code>m_i</code>. First\nPartial sums. This corresponds to the <code>h_i</code>. It is first …\nTotal number of columns in this index.\nColumns related to the relation encoded in the circuit\nAdds offset if the column is <code>Relation</code>. Fails otherwise.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFlatten the column “alias” into the integer-like …\nAn expression over /generic/ (not circuit-specific) columns\nColumns used by the FEC Addition subcircuit.\nFEC ADD inputs: two points = four coordinates, and each in …\nFEC ADD intermediate (work) columns.\nFEC ADD outputs: one point, each in 17 limb output format.\nNumber of columns in the FEC circuits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen P = (xP,yP) and Q = (xQ,yQ) are not negative of each …\nCreates a witness for adding two points, p and q, each …\nConvenience function for printing.\nEnumeration of concrete lookup tables used in FEC circuit.\nAn iterator over the variants of LookupTable\nx ∈ [-2^14, 2^14-1]\nx ∈ [0, 2^15]\nx ∈ [-2^9, 2^9-1]\nx ∈ [0, ff_highest] where ff_highest is the highest …\nProvides a full list of entries for the given table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll tables are fixed tables.\nChecks if a value is in a given table.\nConverts a value to its index in the fixed table.\nColumn indexer for MSM columns.\nNumber of columns in the FFA circuits.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstraint for one row of FF addition:\nEnumeration of concrete lookup tables used in lookups …\nAn iterator over the variants of LookupTable\nx ∈ [0, 2^15]\nx ∈ [-1, 0, 1]\nProvides a full list of entries for the given table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll tables are fixed tables.\nChecks if a value is in a given table.\nConverts a value to its index in the fixed table.\nGeneric structure to represent a (vector) lookup the table …\nRepresents a witness of one instance of the lookup argument\nRepresents the proof of the lookup argument It is …\nA table of values that can be used for a lookup, along …\nTrait for lookup table variants\nCompute the following constraint:\nBuild the constraints for the lookup protocol. The …\nVector of values inside each entry of the table\nA list of functions/looked-up values. Invariant: for fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a value from a u32\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentify fixed and RAMLookups with a boolean. This can be …\nReturns None if the table is runtime (and thus mapping …\nReturns the length of each table.\nThe multiplicity polynomials; by convention, this is a …\nCreates a new Logup\nGenerate a random number of correct lookups in the table …\nIf a table is runtime table, <code>true</code> means we should create an\nTable ID corresponding to this table\nAssign a unique ID to the lookup tables, as an expression.\nAssign a unique ID to the lookup tables.\nAssign a unique ID, as a u32 value\nRepresents the environment for the logup argument.\nThe structure used by the prover the compute the quotient …\nThe evaluation point used for the lookup polynomials.\nCreate an environment for the prover to create a proof for …\nThe evaluations of the fixed tables, over d8, indexed by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe combiner used for vector lookups\nThe commitment to the aggregation polynomial.\nThe evaluations of the aggregation, over d8.\nThe aggregation polynomial.\nThe commitments to the multiplicities, indexed by the …\nThe evaluations of the multiplicities, over d8, indexed by …\nThe polynomial of the multiplicities, indexed by the table …\nThe commitments of the inner sums.\nThe evaluations of the partial sums, over d8.\nThe polynomials of the inner sums.\nCustom lookup table The index of the table is used as the …\nDummy lookup table. For the cases when you don’t need …\nAdditive lookups used in the MSM project based on Logup\nLookup tables used in the MSM project\nRepresents a witness of one instance of the lookup …\nProvides a full list of entries for the given table.\nA list of functions/looked-up values. Invariant: for fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll tables are fixed tables.\nAll tables are fixed tables.\nThe multiplicity polynomials; by convention, this is a …\nGenerate a random number of correct lookups in the table …\nA clone of the <code>PairingSRS</code> that is serialized in a …\nCreates and writes the SRS into <code>get_bn254_srs_path()</code>.\nReturns the argument unchanged.\nObtains an SRS for a specific curve from disk, or …\nThe path of the serialized BN254 SRS, inside this repo.\nCalls <code>U::from(self)</code>.\nCreates a default proof instance. Note that such an empty …\nActual values w_i of the witness columns. “Evaluations”…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors that can arise when creating a proof\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of intermediate limbs of 4 bits required for …\nCarry limbs\nN_LIMBS values, representing the converted IPA challenge.\nN_INTERMEDIATE_LIMBS intermediate values, 4 bits long. …\n3 88-bit inputs. For the row #i this represents the IPA …\nPrevious coefficient C_j, this one is looked up. For the …\nThe resulting coefficient C_i = C_{i - 2^{ceil(log i) - …\nA fixed selector column that gives one the current row, …\nTrusted (for range) foreign field modulus, in 4 big limbs.\nTotal number of columns in the serialization circuit, …\nNumber of fixed selectors for serialization circuit.\nFor current row i, this is i - 2^{ceil(log(i)) - 1}\nQuotient limbs (large)\nSign of the quotient, one bit\nQuotient limbs (small)\nColumns used by the serialization subcircuit.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn FEC addition we use bigger limbs, of 75 bits, that are …\nAlias for LIMB_BITSIZE, used for convenience.\nAlias for N_LIMBS, used for convenience.\nInterprets bigint <code>input</code> as an element of a field modulo …\nReturns the bits between [highest_bit, lowest_bit] of the …\nBuilds fixed selectors for serialization circuit.\nHelper function for limb recombination for carry …\nHelper function for limb recombination.\nHelper function for limb recombination.\nThis constarins the multiplication part of the circuit.\nDeserialize a field element of the scalar field of Vesta …\nReturns the highest limb of the foreign field modulus. Is …\nA convenience helper: given a <code>list_len</code> and <code>n</code> (arguments of …\nDecompose biguint into <code>N</code> limbs of bit size <code>B</code>.\nDecomposes a foreign field element into <code>N</code> limbs of bit …\nMultiplication sub-circuit of the serialization/bootstrap …\nFull serialization circuit.\nEnumeration of concrete lookup tables used in …\nAn iterator over the variants of LookupTable\nCommunication bus for the multiplication circuit.\nx ∈ [-2^14, 2^14-1]\nx ∈ [0, 2^15]\nx ∈ [0, 2^4]\nx ∈ [-2^4, 2^4-1]\nx ∈ [0, ff_highest] where ff_highest is the highest …\nProvides a full list of entries for the given table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a value is in a given table.\nConverts a value to its index in the fixed table.\nNo lookups, no selectors, only witness column. …\nNumber of columns in the test circuits, including fixed …\nNumber of fixed selectors in the test circuit.\nTest column indexer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFixed selectors for the test circuit.\nA constraint function for A + B - C that reads values from …\nA constraint function for A * B - D that reads values from …\nA constraint function for A * B - D that reads values from …\nA constraint function for A_0 + B_0 - FIXED_SEL_1\nA constraint function for A_0^7 + B_0 - FIXED_SEL_1\nA constraint function for 3 * A_0^7 + B_0 * FIXED_SEL_3\nA constraint function for 3 * A_0^7 + 42 * B_0 - …\nCircuit generator function for A + B - C, with D = 0.\nCircuit generator function for A_0 * B_0 - const, with …\nCircuit generator function for A_0 + B_0 - FIXED_SEL_1.\nCircuit generator function for A_0^7 + B_0 - FIXED_SEL_1.\nCircuit generator function for 3 * A_0^7 + B_0 * …\nCircuit generator function for 3 * A_0^7 + 42 * B_0 - …\nCircuit generator function for A * B - C, with D = 0.\nAn iterator over the variants of LookupTable\nFixed table, x ∈ [0, 2^15].\nA runtime table, with no explicit writes.\nA runtime table, with explicit writes.\nProvides a full list of entries for the given table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a value is in a given table.\nConverts a value to its index in the fixed table.\nThe witness columns used by a gate of the MSM circuits. It …\nA witness row is represented by an array of N witness …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over the columns in the circuit.\nIterate over the columns in the circuit, in parallel.\nThis method takes a witness and a vector of evaluations to …")