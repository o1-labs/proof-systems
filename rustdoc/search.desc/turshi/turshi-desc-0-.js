searchState.loadedDescShard("turshi", 0, "This module contains the code that executes a compiled …\nDefinition of some constants for easier readability of the …\nThis module includes some field helpers that are useful …\nThis module represents the Cairo memory, containing the …\nThis module represents a run of a Cairo program as a …\nThe Cairo language works natively for field elements in …\nUpdate ap by adding a number of positions\nUpdate ap by self increment\nUpdate by 2 in call instructions or zero behaviour for …\nDestination refers to ap register\nNumber of Cairo flags\nFirst operand refers to ap register\nSecond operand refers to ap register\nSecond operand is double indexing\nSecond operand refers to fp register\nSecond operand is immediate value\nOperation code is an assert-equal\nOperation code is a call\nOperation code is a jump or an increment\nOperation code is a return\nUpdate pc by an absolute jump\nUpdate pc by a conditional relative jump\nUpdate pc by a relative jump\nDefault increase of pc by adding instruction size\nPosition of destination offset of 16 bits within …\nBit position of the beginning of the flags in a Cairo …\nPosition of first operand offset of 16 bits within …\nPosition of second operand offset of 16 bits within …\nResult is an addition\nResult is a multiplication\nResult is a single operand\nField element helpers for Cairo\nReturn field element as byte, if it fits. Otherwise …\nReturn a field element in hexadecimal in big endian\nReturn first 64 bits of the field element\nReturn <code>pos</code>-th 16-bit chunk as another field element\nThis data structure stores the memory of the program\nReturns the argument unchanged.\nGet size of the public memory\nCalls <code>U::from(self)</code>.\nReturns whether the memory is empty (either length 0, or …\nGet size of the full memory including dummy 0th entry\nCreate a new memory structure from a vector of field …\nRead element in memory address\nWrite u64 element in memory address\nA structure to store auxiliary variables throughout …\nThis structure stores all the needed information relative …\nThis struct stores the needed information to run a program\nA structure to store program counter, allocation pointer …\nA data structure to store a current step of Cairo …\nThis trait contains functions to obtain the Cairo pointers …\nReturns the destination address of the instruction\nReturns the first operand address of the instruction\nReturns the second operand address of the instruction\nReturns the allocation pointer\ncurrent pointers\nThis function creates an instance of a default CairoContext…\nReturns the destination of the instruction\nExecutes a Cairo step from the current registers\nOutputs the final value of the pointers after the …\nfinal computation pointers\nReturns the frame pointer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOutputs the initial value of the pointers after the …\ninitial computation registers\nThis function returns the current word instruction being …\nReturns the field element corresponding to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstate of the computation\nfull execution memory\nCreates a new Cairo execution step from a step index, a …\nCreates a Cairo execution from the public information …\nCreates a new triple of pointers\nCreates a CairoInstruction\n(if any) next pointers\nThis function computes the next program counter Panics if …\nReturns the first operand of the instruction\nReturns the second operand of the instruction\nReturns the program counter\nReturns the result of the instruction\nThis function computes the destination address\nThis function computes the first operand address\nThis function computes the second operand address and …\nThis function computes the value of the result of the …\nReturns the size of the instruction\nOutputs the total number of steps of the execution carried …\ntotal number of steps\nReturns a reference to the set of instructions\nexecution trace as a vector of CairoInstruction\nstate auxiliary variables\nA Cairo word for the runner. Some words are instructions …\nThis trait contains methods that decompose a field element …\nThis trait contains methods that decompose a field element …\nThis trait contains methods to obtain the offset …\nReturns flagset for allocation pointer update\nReturns an offset of 16 bits to its biased representation …\nReturns flagset for destination register\nReturns bit-flag for 16th position\nReturns bit-flag for allocation counter update being a …\nReturns bit-flag for allocation counter update being a …\nReturns bit-flag for destination register as <code>F</code>\nReturns bit-flag for first operand register as <code>F</code>\nReturns bit-flag for allocation pointer for second …\nReturns bit-flag for frame pointer for second register as <code>F</code>\nReturns bit-flag for immediate value for second register …\nReturns bit-flag for operation being an assert-equal as <code>F</code>\nReturns bit-flag for operation being a call as <code>F</code>\nReturns bit-flag for operation being a return as <code>F</code>\nReturns bit-flag for program counter update being absolute …\nReturns bit-flag for program counter update being …\nReturns bit-flag for program counter update being relative …\nReturns bit-flag for addition operation in right side as <code>F</code>\nReturns bit-flag for multiplication operation in right …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a CairoWord from a field element\nReturns the destination offset in biased representation\nReturns the first operand offset in biased representation\nReturns the second operand offset in biased representation\nReturns flagset for first operand register\nReturns flagset for second operand register\nReturns flagset for operation code\nReturns flagset for program counter update\nReturns flagset for result logics\nReturns the content of the word as a field element")