searchState.loadedDescShard("mvpoly", 0, "This module contains the definition of the <code>MVPoly</code> trait, …\nGeneric trait to represent a multi-variate polynomial\nAdd the monomial <code>coeff * x_1^{e_1} * ... * x_N^{e_N}</code> to the\nCompute the cross terms of a list of polynomials. The …\nCompute the cross-terms as described in Behind Nova: …\nCompute the cross-terms of the given polynomial, scaled by …\nReturns the degree of the polynomial.\nEvaluate the polynomial at the vector point <code>x</code>.\nBuild a value from an expression. This method aims to be …\nBuild the univariate polynomial <code>x_i</code> from the variable <code>i</code>. …\nEvaluate the polynomial at the vector point <code>x</code> and the …\nReturns true if the polynomial is homogeneous (of degree <code>D</code>…\nReturn true if the multi-variate polynomial is …\nModify the monomial in the polynomial to the new value …\nThis module contains a list of property tests for the …\nMultivariate polynomial dense representation using prime …\nGenerate a random polynomial of maximum degree <code>max_degree</code>.\nThis module contains functions to work with prime numbers …\nRepresents a multivariate polynomial in <code>N</code> variables with …\nReturns the degree of the polynomial.\nEvaluate the polynomial at the vector point <code>x</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate a random polynomial of maximum degree <code>max_degree</code>.\nRepresents a multivariate polynomial of degree less than <code>D</code> …\nOutput example for N = 2 and D = 2:\nReturns the degree of the polynomial.\nEvaluate the polynomial at the vector point <code>x</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate a random polynomial of maximum degree <code>max_degree</code>.\nCompute all the possible two factors decomposition of a …\nCompute the list of indices to perform N nested loops of …\nReturns the argument unchanged.\nBuild mapping from 1..N to the first N prime numbers. It …\nGet the next prime number\nGenerate the nth prime number\nCalls <code>U::from(self)</code>.\nNaive implementation checking if n is prime You can also …\nCheck if a number is prime using the list of prime numbers …\nGiven a number n, return the list of prime factors of n, …")