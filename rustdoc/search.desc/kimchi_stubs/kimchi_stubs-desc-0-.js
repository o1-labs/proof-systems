searchState.loadedDescShard("kimchi_stubs", 0, "The Marlin_plonk_stubs crate exports some functionalities …\nCairo\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nHandy re-exports\nComplete EC addition in Affine form\nHandy re-exports A row accessible from a given row, …\nEC variable base scalar multiplication with group …\nGate for computing the scalar corresponding to an …\nHandy re-exports The different types of gates the system …\nGeneric arithmetic gate\nPoseidon permutation gate\nRange check\nEC variable base scalar multiplication\nZero gate\nArkworks types This module contains wrapper types to …\nCaml helpers\nVectors We implement a custom type for field vectors in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA GateVector: this is used to represent a list of gates.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinearization helpers\nWhich lookup-patterns should be applied on which rows.\nvector of rounds of L &amp; R commitments\nOracles\nIndexes\nProofs\nPoseidon\nVerifier indexes/keys\nCurves\nCompute the offset corresponding to the <code>CurrOrNext</code> value.\nSRS\nUtils\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n`impl_shared_reference1 implements an OCaml custom type …\n<code>impl_shared_rwlock</code> implements an OCaml custom type that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts the linearization of the kimchi circuit …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoxed so that we don’t store large proving indexes in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoxed so that we don’t store large proving indexes in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum joint size of any joint lookup in a constraint …\nThe maximum length of an element of <code>kinds</code>. This can be …\nThis is same as _lagrange_commitments, but returns the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is same as _lagrange_commitments, but returns the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")