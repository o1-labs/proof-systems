searchState.loadedDescShard("saffron", 0, "This module defines the read proof prover and verifier. …\nThis module defines the storage proof prover and verifier. …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nA <code>FieldBlob&lt;F&gt;</code> is what Storage Provider stores per user’s\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the byte representation of the <code>FieldBlob</code>. Note that\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes commitments C_i, computes α = hash(C_0 || C_1 || ……\nDiff request pointing to a single commitment.\nA list of unique addresses, each ∈ [0, SRS_SIZE]\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of new values, each corresponding to address in …\nWhich commitment within a group of commitments representing\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the bytes a user query\nRepresents a query in term of Field element\nFor commitments C_i and randomness r, returns ∑ r^i C_i.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")