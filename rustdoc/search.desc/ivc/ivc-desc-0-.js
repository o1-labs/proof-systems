searchState.loadedDescShard("ivc", 0, "This crate provides a circuit to achieve Incremental …\nPoseidon hash function with 55 full rounds, 0 partial …\nPoseidon hash function with 55 full rounds, 0 partial …\nPoseidon hash function with 8 full rounds, 56 partial …\nPoseidon parameters for 55 full rounds, 0 partial rounds, …\nMinimal environment needed for evaluating constraints.\nGeneric structure containing column vectors.\nFor FoldingCompatibleExp\nEvaluates the expression in the provided side\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe scalar <code>u</code> that is used to homogenize the polynomials\nThe scalar <code>u</code> that is used to homogenize the polynomials\nThe biggest packing variant for foreign field. Used for …\nNumber of additional columns that a reduction to degree 2 …\nNumber of alphas needed for the IVC circuit, equal is the …\nNumber of constraints used by the IVC circuit.\nThe biggest packing format, 2 limbs.\nIVC circuit layout - Top level documentation outdated\n2*17 15-bit limbs (two base field points)\n2*2 150-bit limbs\n2*4 75-bit limbs\n1 hash per row\nConstant phi\nConstant r\nScalar coeff #1, powers of Phi, phi^i\n17 15-bit limbs\nScalar coeff #2, r * phi^i\nScalar coeff #2, r^2 * phi^i\n17 15-bit limbs\nScalar coeff #2, r^3 * phi^i\n17 15-bit limbs\n17 15-bit limbs\nCoeffifient which is indexing a bucket. Used for both …\nEC ADD intermediate wires\n2*4 75-bit limbs\n2*4 75-bit limbs\nRAM lookup access time for input 1.\nRAM lookup access time for output.\n2*17 15-bit limbs\n2*4 75-bit limbs\nα_{L,i}\nα_{O,i} = α_{L,i} + r·α_R^i\nα_R^i, where α_R = h_R\nConstant h_r\nConstant r\nConstant r\nu_L\nu_O = u_L + r\nSelector for blocks. Inner usize is ∈ [0,#blocks). The …\nA single column containing the folding iteration number, …\nLens used to convert between IVC columns and Poseidon …\nNumber of blocks in the circuit.\nNumber of fixed selectors for the IVC circuit.\nDefines the height of each block in the IVC circuit. As …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns total height of the IVC circuit.\nConstraints for the inputs block.\nThis function generates constraints for the whole IVC …\nThis function generates constraints for the whole IVC …\nHelper. Combines large limbs into one element. Computation …\nHelper. Combines small limbs into big limbs.\nHelper. Combines 17x15bit limbs into 1 native field …\nContains vectors of scalars in small limb representations. …\nBuilds selectors for the IVC circuit. The round constants …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiates the IVC circuit for folding. L is relaxed …\nBase case IVC circuit, completely turned off. For the base …\nϕ^i,   i ∈ [N+1]\nr^2·ϕ^{N+1}\nr^3·ϕ^{N+1}\nr·ϕ^i, i ∈ [N+1]\nInstantiates the IVC circuit for folding. <code>N_COL_TOTAL</code> is …\n<code>comms</code> is lefts, rights, and outs. Returns the packed …\nProcesses scalars. Returns a vector of limbs of (powers …\nEnumeration of concrete lookup tables used in …\nProvides a full list of entries for the given table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll tables are fixed tables.\nConverts a value to its index in the fixed table.\nVector field over F. Something like a vector.\nAn iterator over the variants of PlonkishChallenge\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMap a column alias to the corresponding witness column.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method takes a witness and a vector of evaluations to …\nThis method takes an Instance and a commitment to zero and …\nImplement an interpreter for a specific instance of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the parameters of the instance of the Poseidon …\nApply the whole permutation of Poseidon to the state. The …\nPopulates and checks one poseidon invocation.\nThe column layout will be as follow, supposing a state …\nImplement an interpreter for a specific instance of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the parameters of the instance of the Poseidon …\nApply the whole permutation of Poseidon to the state. The …\nPopulates and checks one poseidon invocation.\nPoseidon parameters that can be used by …\nImplement an interpreter for a specific instance of the …\nThe maximum degree of a constraint\nThe number of columns in the poseidon permutation\nThe number of constraints required by this gadget\nNumber of full rounds\nNumber of partial rounds\nNumber of round constants\nTotal number of rounds, including partial and full.\nConstants used by the IVC circuit used by the folding …\nThe number of field elements in the state\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the parameters of the instance of the Poseidon …\nApply the HADES-based Poseidon to the state. The …\nPopulates and checks one poseidon invocation.\nConstants used by the IVC circuit used by the folding …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nScalar field of the curve.\nThe base field of the curve Used to encode the polynomial …\nThe curve we commit into\nErrors that can arise when creating a proof\nEvaluations of fixed selectors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvaluation of Z_H(ζ) (t_0(X) + ζ^n t_1(X) + …) at ζω.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommitments to the quotient polynomial. The value contains …\nCommitments to the N columns of the circuits, also called …\nWitness evaluations, including public inputs\nScalar field of the curve.\nThe base field of the curve Used to encode the polynomial …\nThe curve we commit into")