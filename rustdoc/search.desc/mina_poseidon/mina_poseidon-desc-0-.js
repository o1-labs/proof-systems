searchState.loadedDescShard("mina_poseidon", 0, "This crate provides a generic implementation of the …\nThe permutation module contains the function implementing …\nThis module implements Poseidon Hash Function primitive\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPlaceholder dummy value for the kimchi configuration, …\nthe fp sponge params\nthe legacy fp sponge params\nthe fq sponge params\nthe legacy fq sponge params\nApply a full round of the permutation. A full round is …\nCryptographic sponge interface - for hashing an arbitrary …\nAbsorb an array of field elements <code>x</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new cryptographic sponge using arithmetic sponge …\nReset the sponge back to its initial state (as if it were …\nSqueeze an output from the sponge\nAbstracts a sponge operating on a base field <code>Fq</code> of the …\nA challenge which is used as a scalar on a group element …\nAbsorbs a base field element. This operation is the most …\nAbsorbs an element of the scalar field <code>Fr</code> — it is done …\nAbsorbs a base field point, that is a pair of <code>Fq</code> elements. …\nSqueeze out a challenge in the scalar field. Implemented by\nSqueeze out a base field challenge. This operation is the …\nReturns a scalar field digest using the binary …\nReturns a base field digest by squeezing the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new sponge.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")