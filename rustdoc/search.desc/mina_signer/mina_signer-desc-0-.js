searchState.loadedDescShard("mina_signer", 0, "Mina signer\nBase field element type\nId for mainnet\nMina network (or blockchain) identifier\nScalar field element type\nInterface for signed objects\nId for all testnets\nCreate an experimental kimchi signer context with domain …\nCreate a legacy signer context with domain parameters …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKeypair structures and algorithms\nPublic key structures and algorithms\nMina Schnorr signature scheme\nSecret key structures and helpers\nSign <code>input</code> (see <code>Hashable</code>) using keypair <code>kp</code> and return the …\nMina signature structure and associated helpers\nVerify that the signature <code>sig</code> on <code>input</code> (see <code>Hashable</code>) is …\nContains the error value\nKeypair structure\nKeypair error\npoint not on curve\nContains the success value\nPublic key error\nKeypair result\nInvalid secret key\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize keypair from secret key bytes\nDeserialize keypair from secret key hex\nCreate keypair from scalar field <code>secret</code> element and curve …\nCreate keypair from secret key\nObtain the Mina address corresponding to the keypair’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key\nGenerate random keypair\nSecret key\nDeserialize keypair into bytes\nDeserialize keypair into hex\nInvalid address base58\nInvalid address checksum\nInvalid address length\nInvalid raw address bytes length\nInvalid address version\nCompressed public keys consist of x-coordinate and …\nContains the error value\nInvalid hex\nLength of Mina addresses\nInvalid y-coordinate parity\nContains the success value\nPublic key\nPublic key errors\nPublic key Result\nInvalid secret key\nInvalid x-coordinate\nInvalid x-coordinate bytes\nPoint not on curve\nInvalid y-coordinate parity\nInvalid y-coordinate\nThe empty <code>CompressedPubKey</code> value that is used as <code>public_key</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize Mina address into public key\nDeserialize Mina address into compressed public key (via …\nDeserialize public key from bytes\nDeserialize compressed public key from bytes\nDeserialize public key from hex\nDeserialize compressed public key from hex\nCreate public key from curve point Note: Does not check …\nCreate public key from a secret key\nCreate compressed public key from a secret key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize public key into corresponding Mina address\nSerialize compressed public key into corresponding Mina …\nConvert public key into compressed public key\nConvert public key into curve point\nParity of y-coordinate\nBorrow public key as curve point\nDeserialize public key into bytes\nDeserialize compressed public key into bytes\nDeserialize public key into hex\nDeserialize compressed public key into hex\nX-coordinate\nSchnorr signer context for the Mina signature algorithm\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nSecret key length\nContains the success value\nKeypair result\nSecret key\nKeypair error\nInvalid base58 secret key\nInvalid secret key bytes\nInvalid secret key checksum\nInvalid secret key hex\nInvalid secrey key length\nInvalid secret key version\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize base58 encoded secret key\nDeserialize secret key from bytes\nDeserialize secret key from hex\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert secret key into scalar field element\nCreate secret key from scalar field element\nGenerate a random secret key\nBorrows secret key as scalar field element\nDeserialize secret key into base58\nDeserialize secret key into bytes\nDeserialize secret key into hex\nSignature structure\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new signature\nBase field component\nScalar field component")