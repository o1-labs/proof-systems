searchState.loadedDescShard("o1_utils", 0, "A collection of utility functions and constants that can …\nThis module hosts the AdjacentPairs type, which can be …\nThis module provides different helpers in creating …\nThis module provides a set of functions to perform bit …\nThis module provides a set of functions to perform bit …\nA macro similar to <code>vec![$elem; $size]</code> which returns a boxed\nA macro similar to <code>vec![vec![$elem; $size1]; $size2]</code> which …\nThis module contains a type ChunkedEvaluations,\nThis module contains a type ChunkedPolynomial, and a …\nThis adds a few utility functions for the DensePolynomial …\nThis adds a few utility functions for the Evaluations …\nUseful helper methods to extend ark_ff::Field.\nDescribes helpers for foreign field arithmetics Generic …\nThis module provides the CryptoDigest trait, which …\nThis modules implements some math helper functions.\nThis adds a few utility functions for serializing and …\nUtils only for testing\nYou can create a new AdjacentPairs from an iterator using:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a vector of elements to a boxed one. Semantically …\nConverts a two-dimensional vector to a constant sized …\nConverts a three-dimensional vector to a constant sized …\nHelpers for BigUint\nReturns the minimum number of bits required to represent a …\nCreates a BigUint from an hexadecimal string in big endian\nBitwise operations\nConjunction of the bits of two BigUint inputs for a given …\nNegate the bits of a Self input If it provides a larger …\nBitwise XOR of two BigUint inputs\nThis struct contains multiple chunk evaluations.\nThe chunk evaluations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEach chunk polynomial has degree <code>size-1</code>.\nThis struct contains multiple chunk polynomials with …\nThis function evaluates polynomial in chunks.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiplies the chunks of a polynomial with powers of …\nThe chunk polynomials.\nEach chunk polynomial has degree <code>size-1</code>.\nAn extension for the DensePolynomial type.\n<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …\nThis function “scales” (multiplies all the …\nShifts all the coefficients to the right.\nConvert a polynomial into chunks. Implementors must ensure …\nAn extension for the Evaluations type.\nRaise each evaluation to some power <code>pow</code>\nThis function “scales” (multiplies) a polynomial with …\nUtility function for shifting poly along domain coordinate\nSquare each evaluation\nField element wrapper for BigUint\nContains the error value\nField element helpers Unless otherwise stated everything …\nField helpers error\nContains the success value\nHelper to generate random field elements\nResult alias using FieldHelpersError\nHelper to obtain two\nCreate a new field element from this field elements bits\nReturns the argument unchanged.\nDeserialize from BigUint\nDeserialize from bits\nDeserialize from bytes\nDeserialize from little-endian hex\nInitialize a random input with a random value of given …\nGenerates a random field element of up to a given number …\nConverts an i32 into a Field\nCOmpute the inner product of two slices of field elements.\nCalls <code>U::from(self)</code>.\nGet the modulus as <code>BigUint</code>\n<code>pows(d, x)</code> returns a vector containing the first <code>d</code> powers …\nReturns the product of all the field elements belonging to …\nField size in bytes\nSerialize field element f to a (positive) BigInt directly.\nSerialize field element to a BigUint\nSerialize to bits\nSerialize to bytes\nConvert BigUint into PrimeField element\nSerialize to hex\nValue two\nPower of two\nRepresents a foreign field element Represents a foreign …\nForeign field helpers for <code>B</code> the limb size.\nReturns the argument unchanged.\nInitializes a new foreign element from a set of bytes in …\nInitializes a new foreign element from a big unsigned …\nInitializes a new foreign element from an element in the …\nCalls <code>U::from(self)</code>.\nlimbs in little endian order\nInitializes a new foreign element from an absolute <code>BigUint</code> …\nCreates a new foreign element from an array containing N …\nObtains the big integer representation of the foreign …\n2^{2 * B}\n2^{3 * B}\n2^{B}\nCreates a new foreign element representing the value zero\nThis trait can be implemented on any type that implements …\nThe domain separation string to use in the hash. This is …\nReturns the digest of <code>self</code>. Note: this is implemented as …\nReturns ceil(log2(d)) but panics if d = 0.\nThis function is bound to be stable soon. See …\nYou can use SerdeAs with serde_with in order to serialize …\nSame as <code>SerdeAs</code> but using unchecked and uncompressed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYou can use this module for serialization and …\nA generic regression serialization test for serialization …\nA generic regression serialization test for serialization …\nYou can use this to deserialize an arkworks type with …\nYou can use this to serialize an arkworks type with serde …\nCreate a new test rng with a random seed")