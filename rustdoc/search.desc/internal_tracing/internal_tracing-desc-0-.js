searchState.loadedDescShard("internal_tracing", 0, "Represents a JSON array.\nRepresents a JSON boolean.\nRepresents any valid JSON value.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nCapture the trace/checkpoint.\nDeclare traces group.\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert boolean to <code>Value::Bool</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nSerialize the given data structure as JSON into the I/O …\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …")