(function() {
    var type_impls = Object.fromEntries([["kimchi_stubs",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CT%3E-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CT%3E-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;T&gt; for Pointer&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<T>","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CT%3E-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt; for Pointer&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Pointer&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Pointer&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromValue%3C'a%3E-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-FromValue%3C'a%3E-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromValue&lt;'a&gt; for Pointer&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_value\" class=\"method trait-impl\"><a href=\"#method.from_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_value</a>(value: Value) -&gt; Pointer&lt;'a, T&gt;</h4></section></summary><div class='docblock'>Convert from OCaml value</div></details></div></details>","FromValue<'a>","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoValue-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-IntoValue-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; IntoValue for Pointer&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method trait-impl\"><a href=\"#method.into_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_value</a>(self, _rt: &amp;<a class=\"struct\" href=\"https://docs.rs/ocaml-interop/0.8.8/ocaml_interop/runtime/struct.OCamlRuntime.html\" title=\"struct ocaml_interop::runtime::OCamlRuntime\">OCamlRuntime</a>) -&gt; Value</h4></section></summary><div class='docblock'>Convert to OCaml value</div></details></div></details>","IntoValue","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OCamlDesc-for-Pointer%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-OCamlDesc-for-Pointer%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; OCamlDesc for Pointer&lt;'_, T&gt;<div class=\"where\">where\n    T: OCamlDesc,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ocaml_desc\" class=\"method trait-impl\"><a href=\"#method.ocaml_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ocaml_desc</a>(env: &amp;Env, generics: &amp;[&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>describes the type in OCaml, given the current environment [Env]\nand the list of generic type parameters of the root type\n(the type that makes use of this type)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unique_id\" class=\"method trait-impl\"><a href=\"#method.unique_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">unique_id</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Returns a unique ID for the type. This ID will not change if concrete\ntype parameters are used.</div></details></div></details>","OCamlDesc","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Pointer&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Pointer&lt;'a, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Pointer&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_final\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_final</a>(\n    x: T,\n    finalizer: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;unsafe extern &quot;C&quot; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(Raw)&gt;,\n    used_max: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;,\n) -&gt; Pointer&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a new value with an optional custom finalizer and used/max</p>\n<p>This calls <code>caml_alloc_final</code> under-the-hood, which can has less than ideal performance\nbehavior. In most cases you should prefer <code>Poiner::alloc_custom</code> when possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_custom\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_custom</a>(x: T) -&gt; Pointer&lt;'a, T&gt;<div class=\"where\">where\n    T: Custom,</div></h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Custom</code> value</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_in_place\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">drop_in_place</a>(self)</h4></section></summary><div class=\"docblock\"><p>Drop pointer in place</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This should only be used when you’re in control of the underlying value and want to drop\nit. It should only be called once.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set</a>(&amp;mut self, x: T)</h4></section></summary><div class=\"docblock\"><p>Replace the inner value with the provided argument</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Access the underlying pointer</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Access the underlying mutable pointer</p>\n</div></details></div></details>",0,"kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"],["<section id=\"impl-StructuralPartialEq-for-Pointer%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Pointer%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for Pointer&lt;'a, T&gt;</h3></section>","StructuralPartialEq","kimchi_stubs::gate_vector::fp::CamlPastaFpPlonkGateVectorPtr","kimchi_stubs::gate_vector::fq::CamlPastaFqPlonkGateVectorPtr","kimchi_stubs::pasta_fp_plonk_index::CamlPastaFpPlonkIndexPtr","kimchi_stubs::pasta_fq_plonk_index::CamlPastaFqPlonkIndexPtr","kimchi_stubs::pasta_fp_poseidon::CamlPastaFpPoseidonParamsPtr","kimchi_stubs::pasta_fq_poseidon::CamlPastaFqPoseidonParamsPtr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[17004]}