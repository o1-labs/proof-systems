(function() {
    var type_impls = Object.fromEntries([["ivc",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericEvalEnv%3CCurve,+N_COL,+N_FSEL,+Evals%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ivc/expr_eval.rs.html#59-192\">Source</a><a href=\"#impl-GenericEvalEnv%3CCurve,+N_COL,+N_FSEL,+Evals%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Curve: <a class=\"trait\" href=\"kimchi/curve/trait.KimchiCurve.html\" title=\"trait kimchi::curve::KimchiCurve\">KimchiCurve</a>, const N_COL: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, const N_FSEL: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Evals: <a class=\"trait\" href=\"ivc/plonkish_lang/trait.CombinableEvals.html\" title=\"trait ivc::plonkish_lang::CombinableEvals\">CombinableEvals</a>&lt;Curve::ScalarField&gt;&gt; <a class=\"struct\" href=\"ivc/expr_eval/struct.GenericEvalEnv.html\" title=\"struct ivc::expr_eval::GenericEvalEnv\">GenericEvalEnv</a>&lt;Curve, N_COL, N_FSEL, Evals&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.process_extended_folding_column\" class=\"method\"><a class=\"src rightside\" href=\"src/ivc/expr_eval.rs.html#74-102\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ivc/expr_eval/struct.GenericEvalEnv.html#tymethod.process_extended_folding_column\" class=\"fn\">process_extended_folding_column</a>&lt;FC: FoldingConfig&lt;Column = <a class=\"enum\" href=\"kimchi_msm/columns/enum.Column.html\" title=\"enum kimchi_msm::columns::Column\">GenericColumn</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, Curve = Curve, Challenge = <a class=\"enum\" href=\"ivc/plonkish_lang/enum.PlonkishChallenge.html\" title=\"enum ivc::plonkish_lang::PlonkishChallenge\">PlonkishChallenge</a>&gt;&gt;(\n    &amp;self,\n    col: &amp;ExtendedFoldingColumn&lt;FC&gt;,\n) -&gt; EvalLeaf&lt;'_, Curve::ScalarField&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.eval_naive_fexpr\" class=\"method\"><a class=\"src rightside\" href=\"src/ivc/expr_eval.rs.html#105-133\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ivc/expr_eval/struct.GenericEvalEnv.html#tymethod.eval_naive_fexpr\" class=\"fn\">eval_naive_fexpr</a>&lt;'a, FC: FoldingConfig&lt;Column = <a class=\"enum\" href=\"kimchi_msm/columns/enum.Column.html\" title=\"enum kimchi_msm::columns::Column\">GenericColumn</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, Curve = Curve, Challenge = <a class=\"enum\" href=\"ivc/plonkish_lang/enum.PlonkishChallenge.html\" title=\"enum ivc::plonkish_lang::PlonkishChallenge\">PlonkishChallenge</a>&gt;&gt;(\n    &amp;'a self,\n    exp: &amp;FoldingExp&lt;FC&gt;,\n) -&gt; EvalLeaf&lt;'a, Curve::ScalarField&gt;</h4></section></summary><div class=\"docblock\"><p>Evaluates the expression in the provided side</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eval_naive_fcompat\" class=\"method\"><a class=\"src rightside\" href=\"src/ivc/expr_eval.rs.html#136-191\">Source</a><h4 class=\"code-header\">pub fn <a href=\"ivc/expr_eval/struct.GenericEvalEnv.html#tymethod.eval_naive_fcompat\" class=\"fn\">eval_naive_fcompat</a>&lt;'a, FC: FoldingConfig&lt;Column = <a class=\"enum\" href=\"kimchi_msm/columns/enum.Column.html\" title=\"enum kimchi_msm::columns::Column\">GenericColumn</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, Curve = Curve, Challenge = <a class=\"enum\" href=\"ivc/plonkish_lang/enum.PlonkishChallenge.html\" title=\"enum ivc::plonkish_lang::PlonkishChallenge\">PlonkishChallenge</a>&gt;&gt;(\n    &amp;'a self,\n    exp: &amp;FoldingCompatibleExpr&lt;FC&gt;,\n) -&gt; EvalLeaf&lt;'a, Curve::ScalarField&gt;</h4></section></summary><div class=\"docblock\"><p>For FoldingCompatibleExp</p>\n</div></details></div></details>",0,"ivc::expr_eval::SimpleEvalEnv"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[4101]}